#include <cstdio>
#include <string>
#include "include/levyflight_launch.h"
#include "include/parse_args.h"
#include "include/generate_rng_seed.h"
#include "include/timeposition.h"
#include "include/drift.h"
#include "include/levyflight.h"
#include "include/levyflight_ensemble.h"
#include "include/levyflight2D.h"
#include "include/levyflight2D_ensemble.h"

void LevyFlightLaunch::printUsage()
{
    printf("Usage: --alpha={alpha} --D={D} --gamma={gamma} --dt={dt} --minDt={minDt} --eta={eta} ");
    printf("--T={T} --t0={t0} --x0={x0} <--y0={y0}><--potentialfile={potential_file_path}><--potentialfile_second={potential_file_second_path}><--Ntraj={Ntraj}> <--seed={seed}>\n\n");
    printf("alpha: Levy parameter\n");
    printf("D: Noise intensity\n");
    printf("gamma: Drift intensity\n");
    printf("dt: Time step\n");
    printf("minDt: Minimal adaptive time step\n");
    printf("eta: Adaptive time step scaling factor\n");
    printf("T: End time\n");
    printf("t0: Initial time\n");
    printf("x0: Initial position x\n");
    printf("y0: Initial position y\n");
    printf("kmr1 : Lower limit of kmr\n");
    printf("kmr2: Upper limit of kmr\n");
    printf("kr1: Lower limit of kr\n");
    printf("kr2: Upper limt of kr\n");
    printf("potentialfile: Path to the data file with 2D potential as a grid\n");
    printf("potentialfile_second: Path to the second data file with 2D potential as a grid\n");
    printf("lvl: Potential level on which the simulation stops");
    printf("Ntraj: Number of trajectories\n");
    printf("seed: Random number generator seed\n\n");
    printf("If no Ntraj is given, the number of trajectories Ntraj=1\n");
    printf("If no seed is given, the seed is generated by setRngSeed() in generate_rng_seed.cpp\n");
}

// void LevyFlightLaunch::setPotentialFile(char *potentialfile)
// {
//     potential_file = std::string(potentialfile);
// }

void LevyFlightLaunch::parseArgs()
{
    parse_args("alpha", alpha, argc, argv);
    parse_args("D", D, argc, argv);
    parse_args("gamma", gamma, argc, argv);
    parse_args("dt", dt, argc, argv);
    parse_args("minDt", minDt, argc, argv);
    parse_args("eta", eta, argc, argv);
    parse_args("T", T, argc, argv);
    parse_args("t0", t0, argc, argv);
    parse_args("x0", x0, argc, argv);
    if (!parse_args("y0", y0, argc, argv))
        dimensions = 1;
    else
        dimensions = 2;

    parse_args("kmr1", kmr1, argc, argv);
    parse_args("kmr2", kmr2, argc, argv);
    parse_args("kr1", kr1, argc, argv);
    parse_args("kr2", kr2, argc, argv);

    parse_args("potentialfile", potential_file, argc, argv);
    parse_args("potentialfile_second", potential_file_second, argc, argv);

    parse_args("lvl", lvl, argc ,argv);

    if (!parse_args("seed", seed, argc, argv))
        seed = setRngSeed();
    if (!parse_args("Ntraj", Ntraj, argc, argv))
        Ntraj = 1;
}

void LevyFlightLaunch::logParsed()
{
    std::clog << "alpha = " << alpha << "\n";
    std::clog << "D = " << D << "\n";
    std::clog << "gamma = " << gamma << "\n";
    std::clog << "dt = " << dt << "\n";
    std::clog << "minDt = " << minDt << "\n";
    std::clog << "eta = " << eta << "\n";
    std::clog << "T = " << T << "\n";
    std::clog << "t0 = " << t0 << "\n";
    std::clog << "x0 = " << x0 << "\n";
    if (dimensions == 2)
    {
        std::clog << "y0 = " << y0 << "\n";
        std::clog << "potential_file = " << potential_file << "\n";
        std::clog << "potential_file_second = " << potential_file_second << "\n";
    }
    
    std::clog << "kmr1 = " << kmr1 << "\n";
    std::clog << "kmr2 = " << kmr2 << "\n";
    std::clog << "kr1 = " << kr1 << "\n";
    std::clog << "kr2 = " << kr2 << "\n";
    std::clog << "seed = " << seed << "\n";
    std::clog << "Ntraj = " << Ntraj << "\n";
    if (Ntraj == 1)
        std::clog << "Whole single trajectory will be printed as the output.\n";
    else
        std::clog << "Only end points of the " << Ntraj << " trajectories will be printed as the output.\n";
    std::clog << "Running the simulation...\n\n";
}

void LevyFlightLaunch::launch_1D_1traj()
{
    LevyFlight *lf = new LevyFlight();
    // TODO: [LEV-42] Make the 1D struct same as 2D with pos member
    timeposition1D X1D_0;
    X1D_0.t = t0;
    X1D_0.x = x0;
    lf->setParams(
        alpha,
        D,
        gamma,
        &dVdx, // from drift.h
        dt,
        minDt,
        eta,
        T,
        X1D_0,
        seed);

    lf->runSimulation();
    lf->printTraj();
}
// TODO: [LEV-65] Initialize potential as grid data from file.
void LevyFlightLaunch::launch_2D_1traj()
{
    std::clog << "----------launch_2D_1traj()--------------\n";
    LevyFlight2D *lf = new LevyFlight2D();
    timeposition2D X2D_0;
    X2D_0.t = t0;
    X2D_0.pos.x = x0;
    X2D_0.pos.y = y0;
    lf->setParams(
        alpha,
        D,
        gamma,
        &V_fitness_determ_test,       // from drift.h
        &dVdx_fitness_determ_test,    // from drift.h
        &dVdx_fitness_determ_test,    // TN
        &out_of_boundary_determ_test, // from drift.h
        dt,
        minDt,
        eta,
        T,
        X2D_0,
        seed
        );

    lf->runSimulation();
    lf->printTraj();
}

//  Global variable and wrapper functions needed as an ugly patch
//  for passing pointer to member function
// https://isocpp.org/wiki/faq/pointers-to-members#memfnptr-vs-fnptr

intrpl *intrpl_global_ptr;

double wrapperV(position2D px)
{
    return (intrpl_global_ptr->V(px)); // from drift.h
}

position2D wrapperdVdx(position2D px)
{
    return (intrpl_global_ptr->dVdx(px)); // from drift.h //interpolacja liniowa miedzy punktami
}

position2D wrapperdVdx_second(position2D px)
{
    return (intrpl_global_ptr->dVdx_second(px)); // from drift.h //interpolacja liniowa miedzy punktami
}

bool wrapperBdr(position2D px, int file = 1)
{
    return (intrpl_global_ptr->out_of_boundary_test(px, file)); // from drift.h
}

GridDataInterface wrapperGetGdi()
{
    return(intrpl_global_ptr->getGdi());
}

void LevyFlightLaunch::launch_2D_1traj_potential_file()
{
    std::clog << "-------------launch_2D_1traj_potential_file()-----------\n";
    intrpl_global_ptr = new intrpl(potential_file, potential_file_second, kmr1, kmr2, kr1, kr2); // from drift.h // inicjalizacja silniku do liczenia interpolacji

     

    LevyFlight2D *lf = new LevyFlight2D();
    timeposition2D X2D_0;
    X2D_0.t = t0;
    X2D_0.pos.x = x0;
    X2D_0.pos.y = y0;
    lf->setParams(
        alpha,
        D,
        gamma,
        &wrapperV,
        &wrapperdVdx, 
        &wrapperdVdx_second,  
        &wrapperBdr,
        dt,
        minDt,
        eta,
        T,
        X2D_0,
        seed,
        &wrapperGetGdi
        );

   

    lf->runSimulation();
    lf->printTraj();
}

void LevyFlightLaunch::launch_1D_ensemble()
{
    LevyFlightEnsemble *lf = new LevyFlightEnsemble();
    timeposition1D X1D_0;
    X1D_0.t = t0;
    X1D_0.x = x0;
    lf->setParams(
        alpha,
        D,
        gamma,
        &dVdx,
        dt,
        minDt,
        eta,
        T,
        X1D_0,
        seed);

    lf->runMultipleSimulations(Ntraj);
    lf->printLastPoints();
}

void LevyFlightLaunch::launch_2D_ensemble()
{
    LevyFlight2DEnsemble *lf = new LevyFlight2DEnsemble();
    timeposition2D X2D_0;
    X2D_0.t = t0;
    X2D_0.pos.x = x0;
    X2D_0.pos.y = y0;
    lf->setParams(
        alpha,
        D,
        gamma,
        &V_fitness_determ_test,       // from drift.h
        &dVdx_fitness_determ_test,    // from drift.h
        &dVdx_fitness_determ_test,    // TN
        &out_of_boundary_determ_test, // from drift.h
        dt,
        minDt,
        eta,
        T,
        X2D_0,
        seed,
        NULL,
        Ntraj
        );

    lf->runMultipleSimulations(Ntraj);
    lf->printLastPoints();
}

void LevyFlightLaunch::launch_2D_ensemble_potential_file()
{
    std::clog << "-------------launch_2D_ensemble_potential_file()-----------\n";
    intrpl_global_ptr = new intrpl(potential_file, potential_file_second, kmr1, kmr2, kr1, kr2); // from drift.h

    LevyFlight2DEnsemble *lf = new LevyFlight2DEnsemble();
    timeposition2D X2D_0;
    X2D_0.t = t0;
    X2D_0.pos.x = x0;
    X2D_0.pos.y = y0;
    lf->setParams(
        alpha,
        D,
        gamma,
        &wrapperV,
        &wrapperdVdx,
        &wrapperdVdx_second, // TN
        &wrapperBdr,
        dt,
        minDt,
        eta,
        T,
        X2D_0,
        seed,
        &wrapperGetGdi,
        Ntraj
        );

    lf->runMultipleSimulations(Ntraj);
    lf->printLastPoints();
    lf->averageTime();
    lf->varianceTime();
}
